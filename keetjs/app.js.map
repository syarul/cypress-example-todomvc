{"version":3,"sources":["../keet/src/components/templateParse/updateState.js","../keet/src/components/conditionalNodes.js","../keet/src/components/templateParse/conditionalCache.js","../keet/src/components/genModelList.js","../keet/src/components/componentParse.js","../keet/src/components/templateParse/replaceCommentBlock.js","../keet/src/components/ternaryOps.js","../keet/src/components/templateParse/valAssign.js","../keet/src/components/templateParse/replaceHandleBars.js","../keet/src/components/templateParse/inspectAttributes.js","../keet/src/components/templateParse/addEvent.js","../keet/src/components/templateParse/reconcile.js","../keet/src/components/templateParse/diffNodes.js","../keet/src/components/genElement.js","../keet/src/components/parseStr.js","../keet/src/base/mount.js","../keet/utils.js","../keet/src/components/strInterpreter.js","../keet/keet.js","../src/app/util.js","../src/app/filter-model.js","../src/app/todo-model.js","../src/app/todo.js","../src/app/filter.js","../src/app/app.js"],"names":["updateState","state","updateStateList","catchNode","node","start","cNode","nextSibling","nodeType","DOCUMENT_ELEMENT_TYPE","isEqualNode","remove","firstChild","resolveConditionalNodes","conditional","setup","runner","addState","currentNode","fetchFrag","frag","document","createDocumentFragment","cache","hasOwnProperty","cloneNode","call","this","parentNode","insertBefore","nodeValue","match","conditionalNodesRawEnd","__pristineFragment__","DOCUMENT_COMMENT_TYPE","appendChild","check","conditionalNodesRawStart","trim","reConditional","concat","nodes","conditionalCache","base","i","length","bind","conditionalNodes","removeProtoModel","id","p","getElementById","childNodes","genModelList","model","reconcile","modelList","listClone","list","listArg","mLength","enableFiltering","undefined","dirty","setAttribute","lastChild","componentParse","componentStr","component","replace","c","cacheInit","ID","getId","el","replaceChild","callBatchPoolUpdate","render","assert","replaceCommentBlock","value","rep","modelRep","re","ternaryOps","input","t","split","condition","leftHand","rightHand","test","valAssign","withTo","RegExp","replaceHandleBars","isAttr","props","ln","tnr","isObjectNotation","self","ref","strInterpreter","result","inspectAttributes","nodeAttributes","attributes","a","ns","name","localName","removeAttribute","lookupParentNode","rootNode","hasAttribute","getAttribute","addEvent","evtData","evtName","Object","keys","handler","addEventListener","fn","e","stopPropagation","target","currentTarget","getIndex","addEventModel","testEventNode","evtStore","obs","args","push","hasChildNodes","modelRaw","recon","_this","hasAttributes","events","map","isModel","instance","isEqual","oldNode","newNode","isIgnored","arbiter","nodeName","checked","setAttr","oAttr","output","iAttr","j","attr","patch","diff","store","count","ignoreNextSibling","newStore","checkNew","index","oldParentNode","checkOld","removeChild","isDirty","diffNodes","IS_STUB","clearState","stateList","indexOf","parseStr","stub","setState","componentDidMount","_mount","tempDiv","createElement","innerHTML","_typeof","DOCUMENT_FRAGMENT_TYPE","DOCUMENT_TEXT_TYPE","genId","rd","Math","random","toString","minId","val","msg","Error","html","_len","arguments","Array","_key","literals","shift","substs","slice","raw","reduce","acc","lit","join","notEqual","b","async","inform","_len2","_key2","mId","clearTimeout","setTimeout","exec","apply","createModel","indentity","defineProperty","enumerable","configurable","get","set","listFilter","_this2","prop","filter","obj","subscribe","add","_extends","kdata-id","update","updateObj","destroy","destroyObj","str","res","m","DELAY","morpher","genElement","componentDidUpdate","timer","updateContext","delay","nextState","isArray","inVal","window","l","console","log","tr","trace","Keet","mount","link","componentWillMount","namespace","data","localStorage","setItem","JSON","stringify","getItem","parse","camelCase","s","charAt","toUpperCase","CreateFilterModel","switch","hash","selected","filterModel","from","page","CreateModel","clearCompleted","todo","completed","updateAll","todoModel","ENTER_KEY","ESC_KEY","STORE_KEY","App","possibleConstructorReturn","_Keet","activeClass","cl","editing","addTodo","newTodo","evtTodo","className","filterTodo","saveEditing","title","isEditing","tgt","focus","setSelectionRange","editTodo","querySelector","blurTodo","keyTodo","which","todoList","_templateObject","location","history","pushState","_this3","onpopstate","updateUrl","filterApp","_templateObject$1","isChecked","plural","clearToggle","todoState","_temp","_ret","todos","uncompleted","create","keyCode","completeAll","_templateObject$2"],"mappings":"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","file":"app.js","sourcesContent":["export default function (state, updateStateList) {\r\n  if (typeof updateStateList === 'function') updateStateList(state)\r\n}\r\n","const conditionalNodesRawEnd = /\\{\\{\\/([^{}]+)\\}\\}/g\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\n\r\nlet cache = {}\r\n\r\n// rebuild the node structure\r\nfunction catchNode (node, start) {\r\n  let cNode\r\n  while (node) {\r\n    cNode = node\r\n    node = node.nextSibling\r\n    if (cNode && cNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      if (cNode.isEqualNode(start)) {\r\n        cNode.remove()\r\n        start = start.nextSibling\r\n      } else {\r\n        catchNode(cNode.firstChild, start)\r\n      }\r\n    } else if (cNode.isEqualNode(start)) {\r\n      cNode.remove()\r\n      start = start.nextSibling\r\n    }\r\n  }\r\n}\r\n\r\nfunction resolveConditionalNodes (node, conditional, setup, runner, addState) {\r\n  let currentNode\r\n  let cNode\r\n  let fetchFrag\r\n  let frag = document.createDocumentFragment()\r\n  if (setup === 'initial' && !cache.hasOwnProperty(conditional)) {\r\n    cNode = node\r\n    while (cNode) {\r\n      currentNode = cNode\r\n      cNode = cNode.nextSibling\r\n      if (currentNode.nodeType !== DOCUMENT_ELEMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawEnd)) {\r\n        cNode = null\r\n        cache[conditional] = cache[conditional] || {}\r\n        // clean up pristine node\r\n        catchNode(this.__pristineFragment__.firstChild, frag.firstChild)\r\n        // since we work backward no need to check fragment recursive conditional states\r\n        cache[conditional].frag = frag\r\n      } else if (currentNode.nodeType !== DOCUMENT_COMMENT_TYPE) {\r\n        frag.appendChild(currentNode)\r\n      }\r\n    }\r\n  } else if (setup === 'conditional-set') {\r\n    if (node.nextSibling.isEqualNode(cache[conditional].frag.firstChild)) return\r\n    fetchFrag = cache[conditional].frag.cloneNode(true)\r\n    runner.call(this, fetchFrag.firstChild, addState)\r\n    node.parentNode.insertBefore(fetchFrag, node.nextSibling)\r\n  }\r\n}\r\n\r\nexport {\r\n  resolveConditionalNodes as default,\r\n  cache\r\n}\r\n","import updateState from './updateState'\r\nimport conditionalNodes from '../conditionalNodes'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\nconst conditionalNodesRawStart = /\\{\\{\\?([^{}]+)\\}\\}/g\r\nconst reConditional = /([^{?])(.*?)(?=\\}\\})/g\r\n\r\nlet conditional\r\nlet currentNode\r\nlet state\r\nlet nodes\r\n\r\nfunction check (node) {\r\n  while (node) {\r\n    currentNode = node\r\n    node = node.nextSibling\r\n    if (currentNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      check.call(this, currentNode.firstChild)\r\n    } else if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawStart)) {\r\n      conditional = currentNode.nodeValue.trim().match(reConditional)\r\n      state = state.concat(conditional)\r\n      nodes = nodes.concat(currentNode)\r\n    }\r\n  }\r\n}\r\n\r\nfunction conditionalCache (addState) {\r\n  state = []\r\n  nodes = []\r\n  check.call(this, this.base.firstChild)\r\n  let i = state.length\r\n  while (i > 0) {\r\n    i--\r\n    updateState(state[i], addState.bind(this))\r\n    conditionalNodes.call(this, nodes[i], state[i], 'initial')\r\n  }\r\n}\r\n\r\nexport default conditionalCache\r\n","\r\n// storage for model state\r\nlet cache = {}\r\n\r\nfunction removeProtoModel (node, id) {\r\n  let p = node.getElementById(id)\r\n  if (p) p.childNodes[1].remove()\r\n}\r\n\r\nfunction genModelList (node, model, reconcile) {\r\n  let modelList\r\n  let i\r\n  let listClone\r\n  let parentNode\r\n  let list\r\n  let listArg\r\n  let mLength\r\n\r\n  cache[model] = cache[model] || {}\r\n\r\n  // check if the model use filtering\r\n  listArg = this[model] && this[model].enableFiltering ? 'listFilter' : 'list'\r\n\r\n  if (!cache[model][listArg]) {\r\n    cache[model][listArg] = node.nextSibling.cloneNode(true)\r\n    node.nextSibling.remove()\r\n    // also remove from pristine nodes / conditional cache store\r\n    removeProtoModel(this.__pristineFragment__, node.parentNode.id)\r\n  }\r\n\r\n  list = cache[model][listArg]\r\n\r\n  if (this[model] !== undefined && this[model].hasOwnProperty(listArg)) {\r\n    parentNode = node.parentNode\r\n\r\n    modelList = this[model][listArg]\r\n\r\n    if (!this[model].dirty) {\r\n      parentNode.setAttribute('pristine-model', '')\r\n      return\r\n    }\r\n\r\n    i = 0\r\n\r\n    mLength = modelList.length\r\n\r\n    while (i < mLength) {\r\n      listClone = list.cloneNode(true)\r\n      reconcile.call(this, listClone, null, modelList[i])\r\n      listClone.setAttribute('kdata-id', modelList[i]['kdata-id'])\r\n      parentNode.insertBefore(listClone, parentNode.lastChild)\r\n      i++\r\n    }\r\n    this[model].dirty = false\r\n  }\r\n}\r\n\r\nexport default genModelList\r\n","import { assert, getId } from '../../utils'\r\n\r\nlet cacheInit = {}\r\n\r\nexport default function (componentStr, node) {\r\n  const component = componentStr.replace('component:', '')\r\n  const c = this[component]\r\n  if (c !== undefined) {\r\n    // this is for initial component runner\r\n    if (!cacheInit[c.ID]) {\r\n      c.render(true)\r\n      cacheInit[c.ID] = c.base.cloneNode(true)\r\n      node.parentNode.replaceChild(c.base, node)\r\n    } else {\r\n      // we need to reattach event listeners if the node is not available on DOM\r\n      if (!getId(this[component].el)) {\r\n        c.base = c.__pristineFragment__.cloneNode(true)\r\n        c.render(true)\r\n        node.parentNode.replaceChild(c.base, node)\r\n      } else {\r\n        node.parentNode.replaceChild(cacheInit[c.ID].cloneNode(true), node)\r\n        // inform sub-component to update\r\n        c.callBatchPoolUpdate()\r\n      }\r\n    }\r\n  } else {\r\n    assert(false, 'Component ' + component + ' does not exist.')\r\n  }\r\n}\r\n","import genModelList from '../genModelList'\r\nimport componentParse from '../componentParse'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\nconst model = /^model:/g\r\nconst component = /^component:([^{}]+)/g\r\n\r\nexport default function (value, node, reconcile) {\r\n  let rep\r\n  let modelRep\r\n\r\n  if (value.match(re)) {\r\n    rep = value.replace(re, '$1').trim()\r\n    if (rep.match(model)) {\r\n      modelRep = rep.replace('model:', '')\r\n      genModelList.call(this, node, modelRep, reconcile)\r\n    } else if (rep.match(component)) {\r\n      componentParse.call(this, rep, node)\r\n    }\r\n  }\r\n}\r\n","// function to resolve ternary operation\r\n\r\nconst test = str => str === '\\'\\'' || str === '\"\"' || str === 'null' ? '' : str\r\n\r\nexport default function (input) {\r\n  if (input.match(/([^?]*)\\?([^:]*):([^;]*)|(\\s*=\\s*)[^;]*/g)) {\r\n    let t = input.split('?')\r\n    let condition = t[0]\r\n    let leftHand = t[1].split(':')[0]\r\n    let rightHand = t[1].split(':')[1]\r\n\r\n    // check the condition fulfillment\r\n\r\n    if (this) {\r\n      if (this[condition]) {\r\n        return {\r\n          value: test(leftHand),\r\n          state: condition\r\n        }\r\n      } else {\r\n        return {\r\n          value: test(rightHand),\r\n          state: condition\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  } else return false\r\n}\r\n","export default function (node, value, replace, withTo) {\r\n  let re = new RegExp(replace, 'g')\r\n  node.nodeValue = node.nodeValue.replace(re, withTo)\r\n}\r\n","import ternaryOps from '../ternaryOps'\r\nimport strInterpreter from '../strInterpreter'\r\nimport updateState from './updateState'\r\nimport valAssign from './valAssign'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nexport default function (value, node, addState, isAttr, model) {\r\n  const props = value.match(re)\r\n  if (!props) return\r\n  let ln = props.length\r\n  let rep\r\n  let tnr\r\n  let isObjectNotation\r\n\r\n  let self = this\r\n\r\n  let ref = model || this\r\n\r\n  while (ln) {\r\n    ln--\r\n    rep = props[ln].replace(re, '$1')\r\n    tnr = ternaryOps.call(ref, rep)\r\n    isObjectNotation = strInterpreter(rep)\r\n    if (isObjectNotation) {\r\n      if (!isAttr) {\r\n        if (isObjectNotation[0] === 'this' && self[isObjectNotation[1]] !== undefined && typeof self[isObjectNotation[1]] === 'function') {\r\n          let result = self[isObjectNotation[1]]()\r\n          if (result !== undefined) {\r\n            valAssign(node, value, '{{' + rep + '}}', result)\r\n          }\r\n        } else {\r\n          updateState(rep, addState)\r\n          valAssign(node, value, '{{' + rep + '}}', self[isObjectNotation[0]][isObjectNotation[1]])\r\n        }\r\n      } else {\r\n        if (isObjectNotation[0] === 'this' && self[isObjectNotation[1]] !== undefined && typeof self[isObjectNotation[1]] === 'function') {\r\n          let result = self[isObjectNotation[1]](ref)\r\n          return result !== undefined ? result : value\r\n        } else {\r\n          updateState(rep, addState)\r\n          return value.replace(props, self[isObjectNotation[0]][isObjectNotation[1]])\r\n        }\r\n      }\r\n    } else {\r\n      if (tnr) {\r\n        updateState(tnr.state, addState)\r\n        if (!isAttr) {\r\n          valAssign(node, value, '{{' + rep + '}}', tnr.value)\r\n        } else {\r\n          return value.replace(props, tnr.value)\r\n        }\r\n      } else {\r\n        if (ref[rep] !== undefined) {\r\n          updateState(rep, addState)\r\n          if (!isAttr) {\r\n            valAssign(node, value, '{{' + rep + '}}', ref[rep])\r\n          } else {\r\n            return value.replace(props, ref[rep])\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import replaceHandleBars from './replaceHandleBars'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nfunction inspectAttributes (node, addState, model) {\r\n  let nodeAttributes = node.attributes\r\n  let i = 0\r\n  let a\r\n  let ns\r\n  let name\r\n\r\n  for (i = nodeAttributes.length; i--;) {\r\n    a = nodeAttributes[i]\r\n    name = a.localName\r\n    ns = a.nodeValue\r\n    if (re.test(name)) {\r\n      node.removeAttribute(name)\r\n      name = replaceHandleBars.call(this, name, node, addState, true, model)\r\n      node.setAttribute(name, ns)\r\n    } else if (re.test(ns)) {\r\n      ns = replaceHandleBars.call(this, ns, node, addState, true, model)\r\n      if (name === 'checked') {\r\n        if (ns === '') {\r\n          node.removeAttribute(name)\r\n          // node.checked = false\r\n        } else {\r\n          // node.checked = true\r\n          node.setAttribute(name, '')\r\n        }\r\n        // node.removeAttribute(name)\r\n      } else {\r\n        if (ns === '') {\r\n          node.setAttribute(name, '')\r\n        } else {\r\n          node.setAttribute(name, ns)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default inspectAttributes\r\n","const DOCUMENT_ELEMENT_TYPE = 1\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nfunction lookupParentNode (rootNode, node) {\r\n  let cNode\r\n  while (node) {\r\n    cNode = node\r\n    node = node.parentNode\r\n    if (cNode.nodeType === DOCUMENT_ELEMENT_TYPE && cNode.hasAttribute('kdata-id')) {\r\n      return { id: cNode.getAttribute('kdata-id'), node: cNode }\r\n    }\r\n    if (cNode.isEqualNode(rootNode)) {\r\n      node = null\r\n    }\r\n  }\r\n}\r\n\r\nconst getIndex = (id, model) => model.list.map(m => m['kdata-id']).indexOf(id)\r\n\r\nfunction addEvent (node, evtData) {\r\n  // delete evtData.isModel\r\n  let evtName = Object.keys(evtData)[0]\r\n  let handler = evtData[evtName]\r\n  if (this[handler] !== undefined && typeof this[handler] === 'function') {\r\n    node.addEventListener(evtName, this[handler].bind(this), !!evtData['useCapture'])\r\n  }\r\n}\r\n\r\nfunction fn (model, handler, node, e) {\r\n  e.stopPropagation()\r\n  if (e.target !== e.currentTarget) {\r\n    let t = lookupParentNode(node, e.target)\r\n    this[handler](model.list[getIndex(t.id, model)], e.target, t.node, e)\r\n  }\r\n}\r\n\r\nfunction addEventModel (node, evtData) {\r\n  // delete evtData.isModel\r\n  let evtName = Object.keys(evtData)[0]\r\n  let handler = evtData[evtName]\r\n  if (this[handler] !== undefined && typeof this[handler] === 'function') {\r\n    let rep = node.firstChild.nodeValue.replace(re, '$1').trim()\r\n    rep = rep.replace('model:', '')\r\n    let model = this[rep]\r\n    node.addEventListener(evtName, fn.bind(this, model, handler, node), !!evtData['useCapture'])\r\n  }\r\n}\r\n\r\nexport {\r\n  addEvent,\r\n  addEventModel\r\n}\r\n","import replaceCommentBlock from './replaceCommentBlock'\r\nimport inspectAttributes from './inspectAttributes'\r\nimport replaceHandleBars from './replaceHandleBars'\r\nimport conditionalNodes from '../conditionalNodes'\r\n\r\nimport { getId } from '../../../utils'\r\nimport { addEvent, addEventModel } from './addEvent'\r\n\r\nconst conditionalNodesRawStart = /\\{\\{\\?([^{}]+)\\}\\}/g\r\nconst reConditional = /([^{?])(.*?)(?=\\}\\})/g\r\nconst re = /{{([^{}]+)}}/g\r\nconst modelRaw = /\\{\\{model:([^{}]+)\\}\\}/g\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\n\r\nfunction testEventNode (node) {\r\n  let nodeAttributes = node.attributes\r\n  let i = 0\r\n  let a\r\n  let name\r\n  let value\r\n  let evtName\r\n  let handler\r\n  let evtStore = []\r\n  let obs\r\n  let args\r\n\r\n  while (i < nodeAttributes.length) {\r\n    a = nodeAttributes[i]\r\n    name = a.localName\r\n    value = a.nodeValue\r\n    if (/^k-/.test(name)) {\r\n      evtName = name.replace(/^k-/, '')\r\n      handler = value.match(/[a-zA-Z]+(?![^(]*\\))/)[0]\r\n      args = value.match(/\\(([^{}]+)\\)/)\r\n      args = args ? args[1] : ''\r\n      obs = {}\r\n      obs[evtName] = handler\r\n      if (args) obs[args] = true\r\n      obs['isModel'] = false\r\n      evtStore.push(obs)\r\n      if (node.hasChildNodes() && node.firstChild.nodeType !== DOCUMENT_ELEMENT_TYPE && node.firstChild.nodeValue.match(modelRaw)) {\r\n        obs['isModel'] = true\r\n      }\r\n    }\r\n    i++\r\n  }\r\n  return evtStore\r\n}\r\n\r\nlet events\r\nlet c\r\nlet currentNode\r\n\r\nfunction recon (node, addState, model) {\r\n  while (node) {\r\n    currentNode = node\r\n    node = node.nextSibling\r\n    if (currentNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      if (currentNode.hasAttributes()) {\r\n        inspectAttributes.call(this, currentNode, addState, model)\r\n\r\n        // to take advantage of caching always assigned id to the node\r\n        // we only assign eventListener on first mount to DOM or when the node is not available on DOM\r\n        if (!getId(currentNode.id)) {\r\n          events = testEventNode.call(this, currentNode)\r\n          if (events.length) {\r\n            events.map(e => {\r\n              !e.isModel ? addEvent.call(this, currentNode, e) : addEventModel.call(this, currentNode, e)\r\n              currentNode.removeAttribute(`k-${Object.keys(e)[0]}`)\r\n            })\r\n          }\r\n        }\r\n      }\r\n      recon.call(this, currentNode.firstChild, addState, model)\r\n    } else if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawStart)) {\r\n      c = currentNode.nodeValue.trim().match(reConditional)\r\n      c = c && c[0]\r\n      if (this[c]) {\r\n        conditionalNodes.call(this, currentNode, c, 'conditional-set', reconcile, addState)\r\n      }\r\n    } else if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE && currentNode.nodeValue.match(re) && !currentNode.nodeValue.match(conditionalNodesRawStart)) {\r\n      replaceCommentBlock.call(this, currentNode.nodeValue, currentNode, reconcile)\r\n    } else {\r\n      replaceHandleBars.call(this, currentNode.nodeValue, currentNode, addState, null, model)\r\n    }\r\n  }\r\n}\r\n\r\nfunction reconcile (instance, addState, model) {\r\n  recon.call(this, instance, addState, model)\r\n}\r\n\r\nexport default reconcile\r\n","import { getId } from '../../../utils'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n\r\nfunction isEqual (oldNode, newNode) {\r\n  return (\r\n    (isIgnored(oldNode) && isIgnored(newNode)) ||\r\n    oldNode.isEqualNode(newNode)\r\n  )\r\n}\r\n\r\nfunction isIgnored (node) {\r\n  return node.getAttribute('data-ignore') != null\r\n}\r\n\r\nfunction arbiter (oldNode, newNode) {\r\n  if (oldNode.nodeName !== 'INPUT') return\r\n  if (oldNode.checked !== newNode.checked) {\r\n    oldNode.checked = newNode.checked\r\n  }\r\n}\r\n\r\nfunction setAttr (oldNode, newNode) {\r\n  let oAttr = newNode.attributes\r\n  let output = {}\r\n  let i = 0\r\n  while (i < oAttr.length) {\r\n    output[oAttr[i].name] = oAttr[i].value\r\n    i++\r\n  }\r\n  let iAttr = oldNode.attributes\r\n  let input = {}\r\n  let j = 0\r\n  while (j < iAttr.length) {\r\n    input[iAttr[j].name] = iAttr[j].value\r\n    j++\r\n  }\r\n  for (let attr in output) {\r\n    if (oldNode.attributes[attr] && oldNode.attributes[attr].name === attr && oldNode.attributes[attr].value !== output[attr]) {\r\n      oldNode.setAttribute(attr, output[attr])\r\n    } else {\r\n      // add new attributes as long is not part of k-<eventListener>\r\n      if (!oldNode.hasAttribute(attr) && !/^k-/.test(attr)) {\r\n        oldNode.setAttribute(attr, output[attr])\r\n      }\r\n    }\r\n  }\r\n  for (let attr in input) {\r\n    // if attributes does not exist on the new node we removed it from the old node\r\n    if (newNode.attributes[attr] && oldNode.attributes[attr]) {\r\n    } else {\r\n      oldNode.removeAttribute(attr)\r\n    }\r\n  }\r\n}\r\n\r\nfunction patch (oldNode, newNode) {\r\n  if (oldNode.nodeType === newNode.nodeType) {\r\n    if (oldNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      arbiter(oldNode, newNode)\r\n      if (isEqual(oldNode, newNode)) return\r\n      diff(oldNode.firstChild, newNode.firstChild)\r\n      if (oldNode.nodeName === newNode.nodeName) {\r\n        setAttr(oldNode, newNode)\r\n      } else {\r\n        oldNode.parentNode.replaceChild(newNode, oldNode)\r\n      }\r\n    } else {\r\n      if (oldNode.nodeValue !== newNode.nodeValue) {\r\n        oldNode.nodeValue = newNode.nodeValue\r\n      }\r\n    }\r\n  } else {\r\n    oldNode.parentNode.replaceChild(newNode, oldNode)\r\n  }\r\n}\r\n\r\nfunction getIndex (store, count) {\r\n  return store.length - count - 1\r\n}\r\n\r\nlet checkNew\r\nlet checkOld\r\n\r\nfunction diff (oldNode, newNode, ignoreNextSibling) {\r\n  let count = 0\r\n  let newStore = []\r\n  while (newNode) {\r\n    count++\r\n    checkNew = newNode\r\n    newNode = ignoreNextSibling ? null : newNode.nextSibling\r\n    newStore.push(checkNew)\r\n  }\r\n  let index\r\n  let oldParentNode = oldNode && oldNode.parentNode\r\n  while (oldNode) {\r\n    count--\r\n    checkOld = oldNode\r\n    oldNode = ignoreNextSibling ? null : oldNode.nextSibling\r\n    index = getIndex(newStore, count)\r\n    if (checkOld && newStore[index]) {\r\n      patch(checkOld, newStore[index])\r\n    } else if (checkOld && !newStore[index]) {\r\n      oldParentNode.removeChild(checkOld)\r\n    }\r\n    if (oldNode === null) {\r\n      while (count > 0) {\r\n        count--\r\n        index = getIndex(newStore, count)\r\n        oldParentNode.appendChild(newStore[index])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction isDirty (node) {\r\n  return node.hasAttribute('pristine-model')\r\n}\r\n\r\nfunction diffNodes (instance) {\r\n  let base = getId(this.el)\r\n  if (base && !this.IS_STUB) {\r\n    diff(base.firstChild, instance)\r\n  } else if (base && !isDirty(instance)) {\r\n    diff(base.firstChild, instance.firstChild)\r\n  }\r\n}\r\n\r\nfunction diffModelNodes (oldModel, newModel, ignoreNextSibling) {\r\n  diff(oldModel, newModel, ignoreNextSibling)\r\n}\r\n\r\nexport {\r\n  diffNodes as default,\r\n  diffModelNodes\r\n}\r\n","// import conditionalSet from './templateParse/conditionalSet'\r\nimport reconcile from './templateParse/reconcile'\r\n// import eventBuff from './templateParse/eventBuff'\r\nimport diffNodes from './templateParse/diffNodes'\r\nimport strInterpreter from './strInterpreter'\r\n\r\nconst DELAY = 0\r\n\r\nconst morpher = function () {\r\n  genElement.call(this)\r\n  // exec life-cycle componentDidUpdate\r\n  if (this.componentDidUpdate && typeof this.componentDidUpdate === 'function') {\r\n    this.componentDidUpdate()\r\n  }\r\n}\r\n\r\nlet timer = {}\r\n\r\nconst updateContext = function (fn, delay) {\r\n  timer[this.ID] = timer[this.ID] || null\r\n  clearTimeout(timer[this.ID])\r\n  timer[this.ID] = setTimeout(() => fn.call(this), delay)\r\n}\r\n\r\nconst nextState = function (i) {\r\n  let self = this\r\n  let state\r\n  let value\r\n  if (!stateList[this.ID]) return\r\n  if (i < stateList[this.ID].length) {\r\n    state = stateList[this.ID][i]\r\n    value = this[state]\r\n\r\n    // if value is undefined, likely has object notation we convert it to array\r\n    if (value === undefined) value = strInterpreter(state)\r\n\r\n    if (value && Array.isArray(value)) {\r\n      // using split object notation as base for state update\r\n      let inVal = this[value[0]][value[1]]\r\n\r\n      Object.defineProperty(this[value[0]], value[1], {\r\n        enumerable: false,\r\n        configurable: true,\r\n        get: function () {\r\n          return inVal\r\n        },\r\n        set: function (val) {\r\n          inVal = val\r\n          updateContext.call(self, morpher, DELAY)\r\n        }\r\n      })\r\n    } else {\r\n      // handle parent state update if the state is not an object\r\n      Object.defineProperty(this, state, {\r\n        enumerable: false,\r\n        configurable: true,\r\n        get: function () {\r\n          return value\r\n        },\r\n        set: function (val) {\r\n          value = val\r\n          updateContext.call(self, morpher, DELAY)\r\n        }\r\n      })\r\n    }\r\n    i++\r\n    nextState.call(this, i)\r\n  }\r\n}\r\n\r\nconst setState = function () {\r\n  nextState.call(this, 0)\r\n}\r\n\r\nlet stateList = {}\r\n\r\nfunction clearState () {\r\n  if (stateList[this.ID]) stateList[this.ID] = []\r\n}\r\n\r\nfunction addState (state) {\r\n  stateList[this.ID] = stateList[this.ID] || []\r\n  if (stateList[this.ID].indexOf(state) === -1) { stateList[this.ID] = stateList[this.ID].concat(state) }\r\n}\r\n\r\nconst genElement = function () {\r\n  this.base = this.__pristineFragment__.cloneNode(true)\r\n  // conditionalSet.call(this, this.base.firstChild)\r\n  reconcile.call(this, this.base.firstChild, addState.bind(this))\r\n  // eventBuff.call(this, this.base.firstChild)\r\n  diffNodes.call(this, this.base.firstChild)\r\n}\r\n\r\nexport {\r\n  genElement,\r\n  addState,\r\n  setState,\r\n  clearState,\r\n  updateContext,\r\n  morpher\r\n}\r\n","import conditionalCache from './templateParse/conditionalCache'\r\n// import conditionalSet from './templateParse/conditionalSet'\r\nimport reconcile from './templateParse/reconcile'\r\n// import eventBuff from './templateParse/eventBuff'\r\nimport { setState, addState } from './genElement'\r\nimport { getId, assert } from '../../utils'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n\r\nexport default function (stub) {\r\n  conditionalCache.call(this, addState.bind(this))\r\n  // conditionalSet.call(this, this.base.firstChild)\r\n  reconcile.call(this, this.base.firstChild, addState.bind(this))\r\n  // eventBuff.call(this, this.base.firstChild)\r\n  const el = stub || getId(this.el)\r\n  if (el) {\r\n    if (el.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      el.setAttribute('data-ignore', '')\r\n    } else {\r\n      assert(this.base.childNodes.length === 1, 'Sub-component should only has a single rootNode.')\r\n      !this.base.firstChild.hasAttribute('data-ignore') && this.base.firstChild.setAttribute('data-ignore', '')\r\n    }\r\n    // listen to state changes\r\n    setState.call(this)\r\n    // mount fragment to DOM\r\n    if (!stub) {\r\n      el.appendChild(this.base)\r\n    }\r\n\r\n    // since component already rendered, trigger its life-cycle method\r\n    if (this.componentDidMount && typeof this.componentDidMount === 'function') {\r\n      this.componentDidMount()\r\n    }\r\n  } else {\r\n    assert(false, 'No element with id: \"' + this.el + '\" exist.')\r\n  }\r\n}\r\n","import { clearState } from '../components/genElement'\r\nimport { assert } from '../../utils'\r\n\r\nconst DOCUMENT_FRAGMENT_TYPE = 11\r\nconst DOCUMENT_TEXT_TYPE = 3\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n/**\r\n * @private\r\n * @description\r\n * Mount an instance of string or html elements\r\n *\r\n * @param {String|Object} instance - the html/string\r\n */\r\nexport default function (instance) {\r\n  let base\r\n  let tempDiv\r\n  let frag = document.createDocumentFragment()\r\n  // Before we begin to parse an instance, do a run-down checks\r\n  // to clean up back-tick string which usually has line spacing.\r\n  if (typeof instance === 'string') {\r\n    base = instance.trim().replace(/\\s+/g, ' ')\r\n    tempDiv = document.createElement('div')\r\n    tempDiv.innerHTML = base\r\n    while (tempDiv.firstChild) {\r\n      frag.appendChild(tempDiv.firstChild)\r\n    }\r\n  // If instance is a html element process as html entities\r\n  } else if (typeof instance === 'object' && instance['nodeType']) {\r\n    if (instance['nodeType'] === DOCUMENT_ELEMENT_TYPE) {\r\n      frag.appendChild(instance)\r\n    } else if (instance['nodeType'] === DOCUMENT_FRAGMENT_TYPE) {\r\n      frag = instance\r\n    } else if (instance['nodeType'] === DOCUMENT_TEXT_TYPE) {\r\n      frag.appendChild(instance)\r\n    } else {\r\n      assert(false, 'Unable to parse instance, unknown type.')\r\n    }\r\n  } else {\r\n    assert(false, 'Parameter is not a string or a html element.')\r\n  }\r\n  // we store the pristine instance in __pristineFragment__\r\n  this.__pristineFragment__ = frag.cloneNode(true)\r\n  this.base = frag\r\n\r\n  // cleanup states on mount\r\n  clearState.call(this)\r\n  return this\r\n}\r\n","const genId = () => {\r\n  const rd = () => (Math.random() * 1 * 1e17).toString(36)\r\n  return `KDATA-${rd()}-${rd()}`\r\n}\r\n\r\nconst minId = () => (Math.random() * 1 * 1e17).toString(36)\r\n\r\nconst getId = id => document.getElementById(id)\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Check a node availability in 100ms, if not found silenty skip the event\r\n * or execute a callback\r\n *\r\n * @param {string} id - the node id\r\n * @param {function} callback - the function to execute on success\r\n * @param {function} notFound - the function to execute on failed\r\n */\r\nconst checkNodeAvailability = (component, componentName, callback, notFound) => {\r\n  let ele = getId(component.el)\r\n  let found = false\r\n  let t\r\n  function find () {\r\n    ele = getId(component.el)\r\n    if (ele) {\r\n      clearInterval(t)\r\n      found = true\r\n      callback(component, componentName, ele)\r\n    }\r\n  }\r\n  function fail () {\r\n    clearInterval(t)\r\n    if (!found && notFound && typeof notFound === 'function') notFound()\r\n  }\r\n  if (ele) return ele\r\n  else {\r\n    t = setInterval(find, 0)\r\n    // ignore finding the node after sometimes\r\n    setTimeout(fail, 5)\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Confirm that a value is truthy, throws an error message otherwise.\r\n *\r\n * @param {*} val - the val to test.\r\n * @param {string} msg - the error message on failure.\r\n * @throws {Error}\r\n */\r\nconst assert = (val, msg) => {\r\n  if (!val) throw new Error('(keet) ' + msg)\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Simple html template literals MODIFIED from : http://2ality.com/2015/01/template-strings-html.html\r\n * by Dr. Axel Rauschmayer\r\n * no checking for wrapping in root element\r\n * no strict checking\r\n * remove spacing / indentation\r\n * keep all spacing within html tags\r\n * include handling ${} in the literals\r\n */\r\nconst html = (...args) => {\r\n  const literals = args.shift()\r\n  const substs = args.slice()\r\n\r\n  let result = literals.raw.reduce((acc, lit, i) => acc + substs[i - 1] + lit)\r\n  // remove spacing, indentation from every line\r\n  result = result.split(/\\n+/)\r\n  result = result.map(t => t.trim()).join('')\r\n  return result\r\n}\r\n\r\nconst notEqual = function (a, b) {\r\n  return a['kdata-id'] !== b['kdata-id']\r\n}\r\n\r\nlet async = {}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * We otimize component lifeCycle triggering by\r\n * trottling the model batch updates\r\n *\r\n */\r\nconst inform = function (...args) {\r\n  if (async[this.mId]) clearTimeout(async[this.mId])\r\n  async[this.mId] = setTimeout(() =>\r\n    this.exec && typeof this.exec === 'function' && this.exec.apply(null, args)\r\n    , 0)\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Copy with modification from preact-todomvc. Model constructor with\r\n * registering callback listener in Object.defineProperty. Any modification\r\n * to ```this.list``` instance will subsequently inform all registered listener.\r\n *\r\n * {{model:<myModel>}}<myModelTemplateString>{{/model:<myModel>}}\r\n *\r\n */\r\nclass createModel {\r\n  constructor (enableFiltering) {\r\n    this.mId = this.indentity\r\n\r\n    async[this.mId] = null\r\n    // if enableFiltering is assigned a value, model generation will\r\n    // use `listFilter` instead of `list`\r\n    this.enableFiltering = enableFiltering || null\r\n\r\n    this.exec = null\r\n\r\n    this.model = []\r\n\r\n    // Register callback listener of any changes\r\n    Object.defineProperty(this, 'list', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get: function () {\r\n        return this.model\r\n      },\r\n      set: function (val) {\r\n        this.model = val\r\n        this.dirty = true\r\n        inform.call(this, this.model, this.listFilter)\r\n      }\r\n    })\r\n\r\n    // Register callback listener of any changes with filter\r\n    Object.defineProperty(this, 'listFilter', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get: function () {\r\n        return !this.prop ? this.model : this.model.filter(obj => obj[this.prop] === this.value)\r\n      }\r\n    })\r\n  }\r\n\r\n  // set identity for this model\r\n  static get indentity () {\r\n    return minId()\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @description\r\n   * Subscribe to the model changes (add/update/destroy)\r\n   *\r\n   * @param {Object} model - the model including all prototypes\r\n   *\r\n   */\r\n  subscribe (fn) {\r\n    this.exec = fn\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @description\r\n   * Add new object to the model list\r\n   *\r\n   * @param {Object} obj - new object to add into the model list\r\n   *\r\n   */\r\n  add (obj) {\r\n    this.list = this.list.concat({ ...obj, 'kdata-id': minId() })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @description\r\n   * Update existing object in the model list\r\n   *\r\n   * @param {String} lookupId - lookup id property name of the object\r\n   * @param {Object} updateObj - the updated properties\r\n   *\r\n   */\r\n  update (updateObj) {\r\n    this.list = this.list.map(obj =>\r\n      notEqual(obj, updateObj) ? obj : updateObj\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @description\r\n   * Filter the model data by selected properties, constructor\r\n   * instantiation should be apply with boolean true as argument\r\n   * to enable filtering\r\n   * @param {String} prop - property of the object\r\n   * @param {String|Boolean|Interger} value - property value\r\n   *\r\n   */\r\n  filter (prop, value) {\r\n    this.prop = prop\r\n    this.value = value\r\n    this.list = this.list\r\n  }\r\n\r\n  /**\r\n * @private\r\n * @description\r\n * Removed existing object in the model list\r\n *\r\n * @param {String} lookupId - lookup id property name of the object\r\n * @param {String} objId - unique identifier of the lookup id\r\n *\r\n */\r\n  destroy (destroyObj) {\r\n    this.list = this.list.filter(obj => {\r\n      return notEqual(obj, destroyObj)\r\n    })\r\n  }\r\n}\r\n\r\nexport {\r\n  createModel,\r\n  html,\r\n  assert,\r\n  checkNodeAvailability,\r\n  genId,\r\n  getId,\r\n  minId\r\n}\r\n","export default (str) => {\r\n  let res = str.match(/\\.*\\./g)\r\n  let result\r\n  if (res && res.length > 0) {\r\n    return str.split('.')\r\n  }\r\n  return result\r\n}\r\n","\r\n/**\r\n * Keetjs v4.0.0 Alpha release: https://github.com/keetjs/keet\r\n * Minimalist view layer for the web\r\n *\r\n * <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Keetjs >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n *\r\n * Copyright 2018, Shahrul Nizam Selamat\r\n * Released under the MIT License.\r\n */\r\n\r\nimport parseStr from './src/components/parseStr'\r\nimport { updateContext, morpher } from './src/components/genElement'\r\nimport { genId, assert, html, createModel } from './utils'\r\nimport mount from './src/base/mount'\r\n\r\nwindow.l = console.log.bind(console)\r\nwindow.tr = console.trace.bind(console)\r\n\r\n/**\r\n * @description\r\n * The main constructor of Keet\r\n */\r\nclass Keet {\r\n  constructor () {\r\n    this.ID = Keet.indentity\r\n  }\r\n\r\n  // generate ID for the component\r\n  static get indentity () {\r\n    return genId()\r\n  }\r\n\r\n  mount (instance) {\r\n    return mount.call(this, instance)\r\n  }\r\n\r\n  link (id) {\r\n    // The target DOM where the rendering will took place.\r\n    if (!id) assert(id, 'No id is given as parameter.')\r\n    this.el = id\r\n    this.render()\r\n    return this\r\n  }\r\n\r\n  render (stub) {\r\n    // life-cycle method before rendering the component\r\n    if (this.componentWillMount && typeof this.componentWillMount === 'function') {\r\n      this.componentWillMount()\r\n    }\r\n\r\n    // Render this component to the target DOM\r\n    if (stub) {\r\n      this.IS_STUB = true\r\n    }\r\n    parseStr.call(this, stub)\r\n  }\r\n\r\n  callBatchPoolUpdate () {\r\n    // force component to update, if any state / non-state\r\n    // value changed DOM diffing will occur\r\n    updateContext.call(this, morpher, 1)\r\n  }\r\n\r\n  subscribe (fn) {\r\n    this.exec = fn\r\n  }\r\n\r\n  inform (model) {\r\n    this.exec && typeof this.exec === 'function' && this.exec(model)\r\n  }\r\n}\r\n\r\nexport {\r\n  Keet as default,\r\n  html,\r\n  createModel\r\n}\r\n","/* global localStorage */\r\nconst store = (namespace, data) => {\r\n  if (data) {\r\n    return localStorage.setItem(namespace, JSON.stringify(data))\r\n  }\r\n  let store = localStorage.getItem(namespace)\r\n  return (store && JSON.parse(store)) || []\r\n}\r\n\r\nconst camelCase = s => s.charAt(0).toUpperCase() + s.slice(1)\r\n\r\nexport {\r\n  store,\r\n  camelCase\r\n}\r\n","import { camelCase } from './util'\r\nimport { createModel } from '../../keet'\r\n\r\nclass CreateFilterModel extends createModel {\r\n  switch (hash, obj) {\r\n    this.list = this.list.map(filter =>\r\n      filter.hash === hash ? ({ ...filter, ...obj }) : ({ ...filter, selected: false })\r\n    )\r\n  }\r\n}\r\n\r\nconst filterModel = new CreateFilterModel()\r\n\r\nArray.from(['all', 'active', 'completed']).map(page =>\r\n  filterModel.add({\r\n    hash: `#/${page}`,\r\n    name: camelCase(page),\r\n    selected: false\r\n  })\r\n)\r\n\r\nexport default filterModel\r\n","import { createModel } from '../../keet'\r\n\r\nclass CreateModel extends createModel {\r\n  clearCompleted () {\r\n    this.list = this.list.filter(todo => !todo.completed)\r\n  }\r\n  updateAll (checked) {\r\n    this.list = this.list.map(todo => ({ ...todo, completed: checked }))\r\n  }\r\n}\r\n\r\nconst todoModel = new CreateModel('filter')\r\n\r\nexport default todoModel\r\n","import Keet, { html } from '../../keet'\r\nimport todoModel from './todo-model'\r\nimport { store } from './util'\r\n\r\nconst ENTER_KEY = 13\r\nconst ESC_KEY = 27\r\nconst STORE_KEY = 'keetjs'\r\n\r\nclass App extends Keet {\r\n  el = 'todo-list'\r\n  todoModel = todoModel\r\n  constructor () {\r\n    super()\r\n    this.todoModel.subscribe(model => {\r\n      this.inform(model)\r\n      store(STORE_KEY, model)\r\n    })\r\n  }\r\n  activeClass (obj) {\r\n    if (!obj) return\r\n    let cl = []\r\n    if (obj.completed) cl = cl.concat('completed')\r\n    if (obj.editing) cl = cl.concat('editing')\r\n    return cl.join(' ')\r\n  }\r\n  addTodo (newTodo) {\r\n    this.todoModel.add(newTodo)\r\n  }\r\n  evtTodo (obj, target) {\r\n    if (target.className === 'toggle') {\r\n      this.todoModel.update({ ...obj, completed: !obj.completed })\r\n    } else if (target.className === 'destroy') {\r\n      this.todoModel.destroy(obj)\r\n    }\r\n  }\r\n  filterTodo (page) {\r\n    if (page === '#/all') {\r\n      this.todoModel.filter(null)\r\n    } else if (page === '#/active') {\r\n      this.todoModel.filter('completed', false)\r\n    } else if (page === '#/completed') {\r\n      this.todoModel.filter('completed', true)\r\n    }\r\n  }\r\n  saveEditing (obj, title) {\r\n    title === ''\r\n      ? this.todoModel.destroy(obj)\r\n      : this.todoModel.update({ ...obj, title: title, editing: false })\r\n    this.isEditing = false\r\n    this.tgt = null\r\n  }\r\n  focus (tgt, ln) {\r\n    tgt.focus()\r\n    tgt.setSelectionRange(ln, ln)\r\n  }\r\n  editTodo (obj, target, node) {\r\n    if (target.nodeName !== 'LABEL') return\r\n    this.isEditing = true\r\n    this.tgt = node.querySelector('.edit')\r\n    this.todoModel.update({ ...obj, editing: true })\r\n  }\r\n  componentDidUpdate () {\r\n    this.tgt && this.focus(this.tgt, this.tgt.value.length)\r\n  }\r\n  blurTodo (obj, target, node) {\r\n    if (!this.isEditing) return\r\n    this.saveEditing(obj, target.value.trim())\r\n  }\r\n  keyTodo (obj, target, node, e) {\r\n    if (e.which === ENTER_KEY || e.which === ESC_KEY) {\r\n      e.which === ENTER_KEY\r\n        ? this.saveEditing(obj, target.value.trim())\r\n        : this.saveEditing(obj, obj.title)\r\n    }\r\n  }\r\n}\r\n\r\nconst todoList = new App()\r\n\r\ntodoList.mount(html`\r\n  <ul id=\"todo-list\" class=\"todo-list\" k-click=\"evtTodo()\" k-dblclick=\"editTodo()\" k-keydown=\"keyTodo()\" k-blur=\"blurTodo(useCapture)\">\r\n    <!-- {{model:todoModel}} -->\r\n      <li class=\"{{this.activeClass}}\">\r\n        <div class=\"view\">\r\n          <input class=\"toggle\" type=\"checkbox\" checked=\"{{completed?checked:''}}\">\r\n          <label>{{title}}</label>\r\n          <button class=\"destroy\"></button>\r\n        </div>\r\n        <input class=\"edit\" value=\"{{title}}\">\r\n      </li>\r\n    <!-- {{/model:todoModel}} -->\r\n  </ul>`)\r\n\r\nexport default todoList\r\n","import Keet, { html } from '../../keet'\r\nimport filterModel from './filter-model'\r\nimport todoList from './todo'\r\n\r\nclass App extends Keet {\r\n  el = 'filters'\r\n  filterModel = filterModel\r\n  componentWillMount () {\r\n    this.filterModel.subscribe(model => this.callBatchPoolUpdate())\r\n    if (window.location.hash === '') {\r\n      window.history.pushState({}, null, '#/all')\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.filterModel.switch(window.location.hash, { selected: true })\r\n    if (window.location.hash !== '#/all') {\r\n      todoList.filterTodo(window.location.hash)\r\n    }\r\n    window.onpopstate = () => this.updateUrl(window.location.hash)\r\n  }\r\n  updateUrl (hash) {\r\n    this.filterModel.switch(hash, { selected: true })\r\n    todoList.filterTodo(hash)\r\n  }\r\n}\r\n\r\nconst filterApp = new App()\r\n\r\nfilterApp.mount(html`\r\n  <ul id=\"filters\" class=\"filters\">\r\n    <!-- {{model:filterModel}} -->\r\n    <li id=\"{{name}}\" k-click=\"updateUrl()\"><a class=\"{{selected?selected:''}}\" href=\"{{hash}}\">{{name}}</a></li>\r\n    <!-- {{/model:filterModel}} -->\r\n  </ul>`)\r\n\r\nexport default filterApp\r\n","import Keet, { html } from '../../keet'\r\nimport filterApp from './filter'\r\nimport todoList from './todo'\r\nimport { store } from './util'\r\n\r\nconst ENTER_KEY = 13\r\nconst STORE_KEY = 'keetjs'\r\n\r\nclass App extends Keet {\r\n  todoList = todoList\r\n  filter = filterApp\r\n  isChecked = false\r\n  count = 0\r\n  plural = ''\r\n  clearToggle = false\r\n  todoState = false\r\n\r\n  componentWillMount () {\r\n    todoList.subscribe(todos => {\r\n      let uncompleted = todos.filter(c => !c.completed)\r\n      let completed = todos.filter(c => c.completed)\r\n      this.clearToggle = !!completed.length\r\n      this.todoState = !!todos.length\r\n      this.plural = uncompleted.length === 1 ? '' : 's'\r\n      this.count = uncompleted.length\r\n      this.isChecked = !uncompleted.length\r\n    })\r\n  }\r\n\r\n  componentDidMount () {\r\n    const data = store(STORE_KEY)\r\n    data.map(obj => this.todoList.todoModel.add(obj))\r\n  }\r\n\r\n  create (e) {\r\n    if (e.keyCode !== ENTER_KEY) return\r\n    let title = e.target.value.trim()\r\n    if (title) {\r\n      this.todoList.addTodo({ title, completed: false, editing: false })\r\n      e.target.value = ''\r\n    }\r\n  }\r\n\r\n  completeAll () {\r\n    this.isChecked = !this.isChecked\r\n    this.todoList.todoModel.updateAll(this.isChecked)\r\n  }\r\n\r\n  clearCompleted () {\r\n    this.todoList.todoModel.clearCompleted()\r\n  }\r\n}\r\n\r\nconst app = new App()\r\n\r\napp.mount(html`\r\n  <section class=\"todoapp\">\r\n    <header id=\"header\">\r\n      <h1>todos</h1>\r\n      <input id=\"new-todo\" class=\"new-todo\" k-keydown=\"create()\" placeholder=\"What needs to be done?\" autofocus>\r\n    </header>\r\n    <!-- {{?todoState}} -->\r\n    <section class=\"main\">\r\n      <input id=\"toggle-all\" class=\"toggle-all\" type=\"checkbox\" checked=\"{{isChecked?checked:''}}\" k-click=\"completeAll()\">\r\n      <label for=\"toggle-all\">Mark all as complete</label>\r\n      <!-- {{component:todoList}} -->\r\n    </section>\r\n    <footer class=\"footer\">\r\n      <span class=\"todo-count\">\r\n        <strong>{{count}}</strong> item{{plural}} left\r\n      </span>\r\n      <!-- {{component:filter}} -->\r\n      <!-- {{?clearToggle}} -->\r\n      <button id=\"clear-completed\" k-click=\"clearCompleted()\" class=\"clear-completed\">Clear completed</button>\r\n      <!-- {{/clearToggle}} -->\r\n    </footer>\r\n    <!-- {{/todoState}} -->\r\n  </section>\r\n  <footer class=\"info\">\r\n    <p>Double-click to edit a todo</p>\r\n    <p>Created by <a href=\"https://github.com/syarul\">Shahrul Nizam Selamat</a></p>\r\n    <p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p>\r\n  </footer>`).link('todo')\r\n"]}